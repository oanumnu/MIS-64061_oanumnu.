{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled10.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMUSa8d+jdw/iGAMExlUZcw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/oanumnu/MIS-64061_oanumnu./blob/main/cats%26dogs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "jOlQ2-MhURpK",
        "outputId": "b08b87ad-154d-4439-c0f0-aa188b004782"
      },
      "source": [
        "import keras\n",
        "keras.__version__"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'2.4.3'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "uuwTftN_UWLZ",
        "outputId": "c85d718b-2249-4a93-81b6-60db52984396"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VkmUwVr1UdYA"
      },
      "source": [
        "import os, shutil"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "2tMK0PLUUiNi",
        "outputId": "c6a5318e-3e51-41e0-ebcd-f4b563008a0e"
      },
      "source": [
        "base_dir = '/content/drive/MyDrive/cats_and_dogs_small'\n",
        "!ls '/content/drive/MyDrive/cats_and_dogs_small'"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test  train  validation\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qQxuf3mrUotH"
      },
      "source": [
        "# Directories for our training,\n",
        "# validation and test splits\n",
        "train_dir = os.path.join(base_dir, 'train')\n",
        "validation_dir = os.path.join(base_dir, 'validation')\n",
        "test_dir = os.path.join(base_dir, 'test')\n",
        "\n",
        "# Directory with our training cat pictures\n",
        "train_cats_dir = os.path.join(train_dir, 'cats')\n",
        "\n",
        "# Directory with our training dog pictures\n",
        "train_dogs_dir = os.path.join(train_dir, 'dogs')\n",
        "\n",
        "# Directory with our validation cat pictures\n",
        "validation_cats_dir = os.path.join(validation_dir, 'cats')\n",
        "\n",
        "# Directory with our validation dog pictures\n",
        "validation_dogs_dir = os.path.join(validation_dir, 'dogs')\n",
        "\n",
        "# Directory with our validation cat pictures\n",
        "test_cats_dir = os.path.join(test_dir, 'cats')\n",
        "\n",
        "# Directory with our validation dog pictures\n",
        "test_dogs_dir = os.path.join(test_dir, 'dogs')"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "obabISaGUvCu",
        "outputId": "0ccf5594-4bcb-4ed0-b640-378ce8e0734a"
      },
      "source": [
        "print('total training cat images:', len(os.listdir(train_cats_dir)))\n",
        "print('total training dog images:', len(os.listdir(train_dogs_dir)))\n",
        "print('total validation cat images:', len(os.listdir(validation_cats_dir)))\n",
        "print('total validation dog images:', len(os.listdir(validation_dogs_dir)))\n",
        "print('total test cat images:', len(os.listdir(test_cats_dir)))\n",
        "print('total test dog images:', len(os.listdir(test_dogs_dir)))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "total training cat images: 1000\n",
            "total training dog images: 1000\n",
            "total validation cat images: 500\n",
            "total validation dog images: 500\n",
            "total test cat images: 499\n",
            "total test dog images: 500\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EOESq7GuHMmT"
      },
      "source": [
        "from keras import layers\n",
        "from keras import models\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
        "                        input_shape=(150, 150, 3)))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(512, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "LfEiKY8cHUcz",
        "outputId": "8a49f1b5-e017-4d3a-e1df-5474a7d8e7bb"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 148, 148, 32)      896       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 74, 74, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 72, 72, 64)        18496     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 36, 36, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 34, 34, 128)       73856     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 17, 17, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 15, 15, 128)       147584    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 7, 7, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 6272)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 512)               3211776   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 3,453,121\n",
            "Trainable params: 3,453,121\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9DRP-Xd6HWPy"
      },
      "source": [
        "from keras import optimizers\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=1e-4),\n",
        "              metrics=['acc'])"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "N0g3UmJUHbuM",
        "outputId": "3d988547-5ace-4cc3-c53e-49dba1ed7b87"
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# All images will be rescaled by 1./255\n",
        "train_datagen = ImageDataGenerator(rescale=1./255)\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "ar5GPA28HhiW",
        "outputId": "b27b77eb-86b3-424d-8a43-edc2676167e9"
      },
      "source": [
        "for data_batch, labels_batch in train_generator:\n",
        "    print('data batch shape:', data_batch.shape)\n",
        "    print('labels batch shape:', labels_batch.shape)\n",
        "    break"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "data batch shape: (20, 150, 150, 3)\n",
            "labels batch shape: (20,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "ShDpfGc-Hnto",
        "outputId": "6a59192b-a57a-4b35-db78-2cd6c9022b17"
      },
      "source": [
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=50,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "50/50 [==============================] - 661s 13s/step - loss: 0.6904 - acc: 0.5462 - val_loss: 0.6810 - val_acc: 0.5510\n",
            "Epoch 2/30\n",
            "50/50 [==============================] - 233s 5s/step - loss: 0.6821 - acc: 0.5631 - val_loss: 0.6769 - val_acc: 0.5430\n",
            "Epoch 3/30\n",
            "50/50 [==============================] - 109s 2s/step - loss: 0.6567 - acc: 0.6068 - val_loss: 0.6583 - val_acc: 0.5970\n",
            "Epoch 4/30\n",
            "50/50 [==============================] - 69s 1s/step - loss: 0.6426 - acc: 0.6104 - val_loss: 0.7008 - val_acc: 0.5490\n",
            "Epoch 5/30\n",
            "50/50 [==============================] - 62s 1s/step - loss: 0.6345 - acc: 0.6371 - val_loss: 0.6234 - val_acc: 0.6510\n",
            "Epoch 6/30\n",
            "50/50 [==============================] - 58s 1s/step - loss: 0.5992 - acc: 0.6813 - val_loss: 0.6455 - val_acc: 0.6140\n",
            "Epoch 7/30\n",
            "50/50 [==============================] - 57s 1s/step - loss: 0.5706 - acc: 0.7020 - val_loss: 0.6046 - val_acc: 0.6600\n",
            "Epoch 8/30\n",
            "50/50 [==============================] - 63s 1s/step - loss: 0.5407 - acc: 0.7370 - val_loss: 0.6036 - val_acc: 0.6560\n",
            "Epoch 9/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.5765 - acc: 0.6942 - val_loss: 0.7102 - val_acc: 0.5920\n",
            "Epoch 10/30\n",
            "50/50 [==============================] - 57s 1s/step - loss: 0.5207 - acc: 0.7393 - val_loss: 0.6179 - val_acc: 0.6700\n",
            "Epoch 11/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.5084 - acc: 0.7547 - val_loss: 0.6112 - val_acc: 0.6810\n",
            "Epoch 12/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.5020 - acc: 0.7706 - val_loss: 0.7002 - val_acc: 0.6310\n",
            "Epoch 13/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4664 - acc: 0.7715 - val_loss: 0.5973 - val_acc: 0.6750\n",
            "Epoch 14/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4631 - acc: 0.7958 - val_loss: 0.6052 - val_acc: 0.6830\n",
            "Epoch 15/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4501 - acc: 0.7713 - val_loss: 0.5620 - val_acc: 0.7060\n",
            "Epoch 16/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4181 - acc: 0.8057 - val_loss: 0.5727 - val_acc: 0.7120\n",
            "Epoch 17/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4469 - acc: 0.7777 - val_loss: 0.5828 - val_acc: 0.6940\n",
            "Epoch 18/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4103 - acc: 0.8068 - val_loss: 0.6017 - val_acc: 0.6840\n",
            "Epoch 19/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.4197 - acc: 0.7891 - val_loss: 0.5943 - val_acc: 0.6990\n",
            "Epoch 20/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.3893 - acc: 0.8356 - val_loss: 0.5682 - val_acc: 0.7200\n",
            "Epoch 21/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.3990 - acc: 0.8226 - val_loss: 0.5534 - val_acc: 0.7240\n",
            "Epoch 22/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.3587 - acc: 0.8419 - val_loss: 0.5600 - val_acc: 0.7240\n",
            "Epoch 23/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.3768 - acc: 0.8289 - val_loss: 0.5976 - val_acc: 0.6990\n",
            "Epoch 24/30\n",
            "50/50 [==============================] - 57s 1s/step - loss: 0.3454 - acc: 0.8585 - val_loss: 0.5433 - val_acc: 0.7330\n",
            "Epoch 25/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.3380 - acc: 0.8583 - val_loss: 0.7705 - val_acc: 0.6440\n",
            "Epoch 26/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.3208 - acc: 0.8751 - val_loss: 0.6051 - val_acc: 0.7200\n",
            "Epoch 27/30\n",
            "50/50 [==============================] - 57s 1s/step - loss: 0.3045 - acc: 0.8604 - val_loss: 0.5744 - val_acc: 0.7190\n",
            "Epoch 28/30\n",
            "50/50 [==============================] - 57s 1s/step - loss: 0.3256 - acc: 0.8625 - val_loss: 0.5919 - val_acc: 0.7040\n",
            "Epoch 29/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.2986 - acc: 0.8956 - val_loss: 0.6872 - val_acc: 0.6960\n",
            "Epoch 30/30\n",
            "50/50 [==============================] - 56s 1s/step - loss: 0.2789 - acc: 0.8851 - val_loss: 0.6095 - val_acc: 0.7250\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "epUgVyBjUj7B"
      },
      "source": [
        "model.save('cats_and_dogs_small_1.h5')"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "JqFye1ajUp_f",
        "outputId": "0ac414d9-a8bd-42a5-ff05-f1f5c03bddb2"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "lHR5NeQGUvJc",
        "outputId": "3b933dbe-c8ac-437f-a1c1-acd22b6a9290"
      },
      "source": [
        "# Data Augmentation\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=50,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      verbose=2)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "50/50 - 61s - loss: 0.6436 - acc: 0.7010 - val_loss: 0.5531 - val_acc: 0.7300\n",
            "Epoch 2/30\n",
            "50/50 - 60s - loss: 0.6041 - acc: 0.6780 - val_loss: 0.5383 - val_acc: 0.7300\n",
            "Epoch 3/30\n",
            "50/50 - 60s - loss: 0.5933 - acc: 0.6770 - val_loss: 0.5267 - val_acc: 0.7350\n",
            "Epoch 4/30\n",
            "50/50 - 60s - loss: 0.5949 - acc: 0.6910 - val_loss: 0.5252 - val_acc: 0.7280\n",
            "Epoch 5/30\n",
            "50/50 - 61s - loss: 0.5609 - acc: 0.7180 - val_loss: 0.5179 - val_acc: 0.7360\n",
            "Epoch 6/30\n",
            "50/50 - 60s - loss: 0.5640 - acc: 0.7080 - val_loss: 0.5346 - val_acc: 0.7220\n",
            "Epoch 7/30\n",
            "50/50 - 60s - loss: 0.5547 - acc: 0.7130 - val_loss: 0.5181 - val_acc: 0.7290\n",
            "Epoch 8/30\n",
            "50/50 - 60s - loss: 0.5787 - acc: 0.7050 - val_loss: 0.5114 - val_acc: 0.7310\n",
            "Epoch 9/30\n",
            "50/50 - 60s - loss: 0.5562 - acc: 0.7170 - val_loss: 0.5154 - val_acc: 0.7360\n",
            "Epoch 10/30\n",
            "50/50 - 60s - loss: 0.5327 - acc: 0.7230 - val_loss: 0.5189 - val_acc: 0.7390\n",
            "Epoch 11/30\n",
            "50/50 - 60s - loss: 0.5436 - acc: 0.7330 - val_loss: 0.5145 - val_acc: 0.7270\n",
            "Epoch 12/30\n",
            "50/50 - 60s - loss: 0.5424 - acc: 0.7120 - val_loss: 0.5058 - val_acc: 0.7430\n",
            "Epoch 13/30\n",
            "50/50 - 60s - loss: 0.5432 - acc: 0.7230 - val_loss: 0.5158 - val_acc: 0.7360\n",
            "Epoch 14/30\n",
            "50/50 - 60s - loss: 0.5227 - acc: 0.7570 - val_loss: 0.4991 - val_acc: 0.7560\n",
            "Epoch 15/30\n",
            "50/50 - 60s - loss: 0.5280 - acc: 0.7360 - val_loss: 0.5043 - val_acc: 0.7390\n",
            "Epoch 16/30\n",
            "50/50 - 60s - loss: 0.5359 - acc: 0.7400 - val_loss: 0.4978 - val_acc: 0.7410\n",
            "Epoch 17/30\n",
            "50/50 - 60s - loss: 0.5667 - acc: 0.7230 - val_loss: 0.4969 - val_acc: 0.7500\n",
            "Epoch 18/30\n",
            "50/50 - 60s - loss: 0.5446 - acc: 0.7180 - val_loss: 0.4901 - val_acc: 0.7550\n",
            "Epoch 19/30\n",
            "50/50 - 60s - loss: 0.5326 - acc: 0.7400 - val_loss: 0.4918 - val_acc: 0.7530\n",
            "Epoch 20/30\n",
            "50/50 - 60s - loss: 0.5463 - acc: 0.7090 - val_loss: 0.4927 - val_acc: 0.7550\n",
            "Epoch 21/30\n",
            "50/50 - 60s - loss: 0.5194 - acc: 0.7430 - val_loss: 0.4917 - val_acc: 0.7570\n",
            "Epoch 22/30\n",
            "50/50 - 60s - loss: 0.5338 - acc: 0.7310 - val_loss: 0.5040 - val_acc: 0.7470\n",
            "Epoch 23/30\n",
            "50/50 - 60s - loss: 0.5337 - acc: 0.7430 - val_loss: 0.4879 - val_acc: 0.7590\n",
            "Epoch 24/30\n",
            "50/50 - 60s - loss: 0.5382 - acc: 0.7560 - val_loss: 0.4933 - val_acc: 0.7590\n",
            "Epoch 25/30\n",
            "50/50 - 60s - loss: 0.5191 - acc: 0.7280 - val_loss: 0.4825 - val_acc: 0.7570\n",
            "Epoch 26/30\n",
            "50/50 - 60s - loss: 0.5265 - acc: 0.7430 - val_loss: 0.4883 - val_acc: 0.7570\n",
            "Epoch 27/30\n",
            "50/50 - 60s - loss: 0.5037 - acc: 0.7540 - val_loss: 0.5136 - val_acc: 0.7340\n",
            "Epoch 28/30\n",
            "50/50 - 60s - loss: 0.5073 - acc: 0.7470 - val_loss: 0.4931 - val_acc: 0.7570\n",
            "Epoch 29/30\n",
            "50/50 - 60s - loss: 0.5234 - acc: 0.7520 - val_loss: 0.4865 - val_acc: 0.7630\n",
            "Epoch 30/30\n",
            "50/50 - 60s - loss: 0.5201 - acc: 0.7230 - val_loss: 0.4964 - val_acc: 0.7570\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qdjriu92b93n"
      },
      "source": [
        "model.save('cats_and_dogs_small_2.h5')"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "cDx3WuuqcFjO",
        "outputId": "a6c7c8cc-c92f-45b7-f2de-955db027dcb4"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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ioj43zldgFXjGGNMArBkb4wxCcCSvTHGJICoq7M3xpS/Q4cOkZWVxf79+wNvbCIqOTmZBg0aUKlSpZD2s2RvjCErK4vq1auTmppK0XPPmEhTVbKzs8nKyqJJkyYh7Rs31TgTJ0JqKlSo4P5OtOmXjQna/v37qV27tiX6KCci1K5du0S/wOKiZD9xIgwYAHu9qS/WrXPLAL17F72fMSafJfrYUNLPKS5K9kOH5if6PHv3uvXGGGPiJNmvXx/aemNMdMnOziYtLY20tDROPPFE6tevf2T54MGDxe6bmZnJ4MGDA56jU6dOYYl17ty5XHXVVWE5VnmKi2TfyH9StwDrjTGlE+42stq1a7No0SIWLVrEbbfdxl133XVkuXLlyuTk5BS5b3p6Os8991zAc3zxxRelCzLGBZXsRaSLiKwQkVVFTRgsIteLyFIRWSIib/i9dpyIZInIP8MRtL9Ro6BKlYLrqlRx640x4ZXXRrZuHajmt5GFu1NERkYGt912G2eddRb3338/33zzDR07dqRNmzZ06tSJFStWAAVL2iNGjKBfv36cf/75NG3atMCXQLVq1Y5sf/7559OjRw9OO+00evfuTd7ov++//z6nnXYa7dq1Y/DgwQFL8Nu2beOaa66hVatWnH322SxevBiATz755MgvkzZt2rB79242bdrEueeeS1paGmeeeSafffZZeN+wAAI20IpIEjAGuAQ3zvh8EZnuTcSct00z4EGgs6puF5G6fod5FPg0fGEXlNcIO3Soq7pp1MglemucNSb8imsjC/f/uaysLL744guSkpLYtWsXn332GRUrVmT27Nk89NBD/Oc//zlqn+XLlzNnzhx2797NqaeeysCBA4/qk/7tt9+yZMkSTjrpJDp37sznn39Oeno6t956K59++ilNmjShV69eAeMbPnw4bdq0Ydq0aXz88cf06dOHRYsWMXr0aMaMGUPnzp3Zs2cPycnJjB07lssuu4yhQ4dy+PBh9vq/iWUsmN44HYBVqroGQEQm4WYRWuqzTX9gjKpuB1DVzXkviEg74ATcPKHpYYr7KL17W3I3pjyUZxtZz549SUpKAmDnzp307duXlStXIiIcOnSo0H2uvPJKjjnmGI455hjq1q3Lr7/+SoMGDQps06FDhyPr0tLSWLt2LdWqVaNp06ZH+q/36tWLsWPHFhvfvHnzjnzhXHjhhWRnZ7Nr1y46d+7M3XffTe/evenevTsNGjSgffv29OvXj0OHDnHNNdeQlpZWqvcmVMFU49QHNvgsZ3nrfDXHzWj/uYh85U0rh4hUAJ7GTcxcJBEZICKZIpK5ZcuW4KM3xpS78mwjq1q16pHnjzzyCBdccAE//PAD7777bpF9zY855pgjz5OSkgqt7w9mm9IYMmQI48ePZ9++fXTu3Jnly5dz7rnn8umnn1K/fn0yMjJ49dVXw3rOQMLVQFsRN4v8+UAvYJyI1ABuB95X1azidlbVsaqarqrpKSlFDsdsjIkCkWoj27lzJ/Xru3LmhAkTwn78U089lTVr1rB27VoAJk+eHHCfc845h4leY8XcuXOpU6cOxx13HKtXr6Zly5Y88MADtG/fnuXLl7Nu3TpOOOEE+vfvzy233MLChQvDfg3FCaYaZyPQ0Ge5gbfOVxbwtaoeAn4SkR9xyb8jcI6I3A5UAyqLyB5VLbSR1xgT/SLVRnb//ffTt29fHnvsMa688sqwH//YY4/l+eefp0uXLlStWpX27dsH3CevQbhVq1ZUqVKFV155BYBnn32WOXPmUKFCBVq0aMHll1/OpEmT+Nvf/kalSpWoVq1auZfsA85BKyIVgR+Bi3BJfj5wk6ou8dmmC9BLVfuKSB3gWyBNVbN9tskA0lV1UHHnS09PV5u8xJjytWzZMk4//fRIhxFxe/bsoVq1aqgqd9xxB82aNeOuu+6KdFhHKezzEpEFqlpku2jAahxVzQEGATOBZcAUVV0iIiNFpKu32UwgW0SWAnOA+3wTvTHGxIJx48aRlpZGixYt2LlzJ7feemukQwqbgCX78mYle2PKn5XsY0uZlOyNMcbEPkv2xhiTACzZG2NMArBkb4wxCcCSvTEm4i644AJmzpxZYN2zzz7LwIEDi9zn/PPPJ68zxxVXXMGOHTuO2mbEiBGMHj262HNPmzaNpUvzR38ZNmwYs2fPDiX8QkXbUMiW7I0xEderVy8mTZpUYN2kSZOCGowM3GiVNWrUKNG5/ZP9yJEjufjii0t0rGhmyd4YE3E9evTgvffeOzJRydq1a/n5558555xzGDhwIOnp6bRo0YLhw4cXun9qaipbt24FYNSoUTRv3pzf/e53R4ZBBteHvn379rRu3ZrrrruOvXv38sUXXzB9+nTuu+8+0tLSWL16NRkZGUydOhWAjz76iDZt2tCyZUv69evHgQMHjpxv+PDhtG3blpYtW7J8+fJiry8ahkKOizlojTHhc+edsGhReI+ZlgbPPlv067Vq1aJDhw7MmDGDbt26MWnSJK6//npEhFGjRlGrVi0OHz7MRRddxOLFi2nVqlWhx1mwYAGTJk1i0aJF5OTk0LZtW9q1awdA9+7d6d+/PwAPP/wwL774In/605/o2rUrV111FT169ChwrP3795ORkcFHH31E8+bN6dOnDy+88AJ33nknAHXq1GHhwoU8//zzjB49mvHjxxd5fdEwFLKV7I0xUcG3Kse3CmfKlCm0bduWNm3asGTJkgJVLv4+++wzrr32WqpUqcJxxx1H165dj7z2ww8/cM4559CyZUsmTpzIkiVLijwOwIoVK2jSpAnNmzcHoG/fvnz6af60HN27dwegXbt2RwZPK8q8efO4+eabgcKHQn7uuefYsWMHFStWpH379rz88suMGDGC77//nurVqxd77GBZyd4YU0BxJfCy1K1bN+666y4WLlzI3r17adeuHT/99BOjR49m/vz51KxZk4yMjCKHNg4kIyODadOm0bp1ayZMmMDcuXNLFW/eMMmlGSJ5yJAhXHnllbz//vt07tyZmTNnHhkK+b333iMjI4O7776bPn36lCpWsJK9MSZKVKtWjQsuuIB+/fodKdXv2rWLqlWrcvzxx/Prr78yY8aMYo9x7rnnMm3aNPbt28fu3bt59913j7y2e/du6tWrx6FDh44MSwxQvXp1du/efdSxTj31VNauXcuqVasAeO211zjvvPNKdG3RMBSyleyNMVGjV69eXHvttUeqc1q3bk2bNm047bTTaNiwIZ07dy52/7Zt23LDDTfQunVr6tatW2CY4kcffZSzzjqLlJQUzjrrrCMJ/sYbb6R///4899xzRxpmAZKTk3n55Zfp2bMnOTk5tG/fnttuu61E1xUNQyHbQGjGGBsILcbYQGjGGGMKZcneGGMSQFDJXkS6iMgKEVklIoVOKSgi14vIUhFZIiJveOvSRORLb91iEbkhnMEbY8In2qp0TeFK+jkFbKAVkSRgDHAJbq7Z+SIyXVWX+mzTDHgQ6Kyq20WkrvfSXqCPqq4UkZOABSIyU1WPHsTCGBMxycnJZGdnU7t2bUQk0uGYIqgq2dnZJCcnh7xvML1xOgCrVHUNgIhMAroBvnc29AfGqOp2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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o64X7s95cQkt"
      },
      "source": [
        "from keras import layers\n",
        "from keras import models\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
        "                        input_shape=(150, 150, 3)))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(512, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SlBFARBncbNu"
      },
      "source": [
        "from keras import optimizers\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=1e-4),\n",
        "              metrics=['acc'])"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "kDY8DQegcdHg",
        "outputId": "d84368fd-9d9d-4c36-df7f-bbd2687c23d3"
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# All images will be rescaled by 1./255\n",
        "train_datagen = ImageDataGenerator(rescale=1./255)\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "qaGOdNuDcjbh",
        "outputId": "f431765a-a547-4425-f69a-35e23229fcec"
      },
      "source": [
        "for data_batch, labels_batch in train_generator:\n",
        "    print('data batch shape:', data_batch.shape)\n",
        "    print('labels batch shape:', labels_batch.shape)\n",
        "    break"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "data batch shape: (20, 150, 150, 3)\n",
            "labels batch shape: (20,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "fWvDSP_gcwKW",
        "outputId": "758a3bee-1764-4213-8cd1-42d5d4105fc3"
      },
      "source": [
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=75,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.7006 - acc: 0.4707 - val_loss: 0.6797 - val_acc: 0.5110\n",
            "Epoch 2/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.6801 - acc: 0.5488 - val_loss: 0.6877 - val_acc: 0.5500\n",
            "Epoch 3/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.6569 - acc: 0.6134 - val_loss: 0.6370 - val_acc: 0.6380\n",
            "Epoch 4/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.6104 - acc: 0.6725 - val_loss: 0.6145 - val_acc: 0.6540\n",
            "Epoch 5/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.5741 - acc: 0.7102 - val_loss: 0.6028 - val_acc: 0.6630\n",
            "Epoch 6/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.5375 - acc: 0.7285 - val_loss: 0.5888 - val_acc: 0.6800\n",
            "Epoch 7/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.5454 - acc: 0.7328 - val_loss: 0.6830 - val_acc: 0.6370\n",
            "Epoch 8/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.5286 - acc: 0.7300 - val_loss: 0.5727 - val_acc: 0.6970\n",
            "Epoch 9/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.5050 - acc: 0.7565 - val_loss: 0.5884 - val_acc: 0.6860\n",
            "Epoch 10/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.4848 - acc: 0.7619 - val_loss: 0.5580 - val_acc: 0.7080\n",
            "Epoch 11/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.4728 - acc: 0.7840 - val_loss: 0.6224 - val_acc: 0.6710\n",
            "Epoch 12/30\n",
            "75/75 [==============================] - 81s 1s/step - loss: 0.4294 - acc: 0.7934 - val_loss: 0.5601 - val_acc: 0.7030\n",
            "Epoch 13/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.4264 - acc: 0.8023 - val_loss: 0.6578 - val_acc: 0.6790\n",
            "Epoch 14/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.4109 - acc: 0.8088 - val_loss: 0.5494 - val_acc: 0.7340\n",
            "Epoch 15/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.3823 - acc: 0.8308 - val_loss: 0.5601 - val_acc: 0.7220\n",
            "Epoch 16/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.3764 - acc: 0.8383 - val_loss: 0.5652 - val_acc: 0.7170\n",
            "Epoch 17/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.3322 - acc: 0.8599 - val_loss: 0.6363 - val_acc: 0.6980\n",
            "Epoch 18/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.3294 - acc: 0.8677 - val_loss: 0.5870 - val_acc: 0.7090\n",
            "Epoch 19/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.2942 - acc: 0.8846 - val_loss: 0.6071 - val_acc: 0.7180\n",
            "Epoch 20/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.2935 - acc: 0.8730 - val_loss: 0.6010 - val_acc: 0.7190\n",
            "Epoch 21/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.2742 - acc: 0.8765 - val_loss: 0.6231 - val_acc: 0.7160\n",
            "Epoch 22/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.2626 - acc: 0.8937 - val_loss: 0.6200 - val_acc: 0.7200\n",
            "Epoch 23/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.2343 - acc: 0.9096 - val_loss: 0.6152 - val_acc: 0.7180\n",
            "Epoch 24/30\n",
            "75/75 [==============================] - 77s 1s/step - loss: 0.2224 - acc: 0.9087 - val_loss: 0.6251 - val_acc: 0.7300\n",
            "Epoch 25/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.2100 - acc: 0.9050 - val_loss: 0.7161 - val_acc: 0.7170\n",
            "Epoch 26/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.1896 - acc: 0.9312 - val_loss: 0.6788 - val_acc: 0.7250\n",
            "Epoch 27/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.1561 - acc: 0.9545 - val_loss: 0.6553 - val_acc: 0.7190\n",
            "Epoch 28/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.1497 - acc: 0.9529 - val_loss: 0.7110 - val_acc: 0.7110\n",
            "Epoch 29/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.1374 - acc: 0.9560 - val_loss: 0.7013 - val_acc: 0.7240\n",
            "Epoch 30/30\n",
            "75/75 [==============================] - 78s 1s/step - loss: 0.1311 - acc: 0.9540 - val_loss: 0.7407 - val_acc: 0.7170\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uCPhISkv4U0U"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S7dJ1Dr1q3gi"
      },
      "source": [
        "model.save('cats_and_dogs_small_3.h5')"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "JUX7htQGrB-i",
        "outputId": "03946d95-4de4-49a3-80b9-d0576ae272c9"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "8JKIfm5frKfW",
        "outputId": "9c30fc12-8185-4653-8f43-108e593126c0"
      },
      "source": [
        "# Data Augmentation\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=75,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      verbose=2)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "75/75 - 86s - loss: 0.7068 - acc: 0.6867 - val_loss: 0.6276 - val_acc: 0.7220\n",
            "Epoch 2/30\n",
            "75/75 - 85s - loss: 0.6331 - acc: 0.6847 - val_loss: 0.5622 - val_acc: 0.7220\n",
            "Epoch 3/30\n",
            "75/75 - 84s - loss: 0.6025 - acc: 0.6920 - val_loss: 0.5505 - val_acc: 0.7240\n",
            "Epoch 4/30\n",
            "75/75 - 84s - loss: 0.5676 - acc: 0.7087 - val_loss: 0.5222 - val_acc: 0.7330\n",
            "Epoch 5/30\n",
            "75/75 - 84s - loss: 0.5669 - acc: 0.7107 - val_loss: 0.5270 - val_acc: 0.7300\n",
            "Epoch 6/30\n",
            "75/75 - 84s - loss: 0.5517 - acc: 0.7247 - val_loss: 0.5192 - val_acc: 0.7350\n",
            "Epoch 7/30\n",
            "75/75 - 84s - loss: 0.5557 - acc: 0.7147 - val_loss: 0.5097 - val_acc: 0.7430\n",
            "Epoch 8/30\n",
            "75/75 - 84s - loss: 0.5424 - acc: 0.7207 - val_loss: 0.5203 - val_acc: 0.7410\n",
            "Epoch 9/30\n",
            "75/75 - 84s - loss: 0.5411 - acc: 0.7153 - val_loss: 0.5131 - val_acc: 0.7350\n",
            "Epoch 10/30\n",
            "75/75 - 84s - loss: 0.5270 - acc: 0.7300 - val_loss: 0.5025 - val_acc: 0.7420\n",
            "Epoch 11/30\n",
            "75/75 - 84s - loss: 0.5385 - acc: 0.7260 - val_loss: 0.5175 - val_acc: 0.7440\n",
            "Epoch 12/30\n",
            "75/75 - 84s - loss: 0.5417 - acc: 0.7253 - val_loss: 0.5200 - val_acc: 0.7500\n",
            "Epoch 13/30\n",
            "75/75 - 84s - loss: 0.5361 - acc: 0.7240 - val_loss: 0.5026 - val_acc: 0.7530\n",
            "Epoch 14/30\n",
            "75/75 - 84s - loss: 0.5187 - acc: 0.7507 - val_loss: 0.5090 - val_acc: 0.7460\n",
            "Epoch 15/30\n",
            "75/75 - 84s - loss: 0.5203 - acc: 0.7393 - val_loss: 0.5085 - val_acc: 0.7550\n",
            "Epoch 16/30\n",
            "75/75 - 84s - loss: 0.5220 - acc: 0.7433 - val_loss: 0.5072 - val_acc: 0.7520\n",
            "Epoch 17/30\n",
            "75/75 - 84s - loss: 0.5126 - acc: 0.7480 - val_loss: 0.5027 - val_acc: 0.7570\n",
            "Epoch 18/30\n",
            "75/75 - 84s - loss: 0.5093 - acc: 0.7427 - val_loss: 0.4872 - val_acc: 0.7560\n",
            "Epoch 19/30\n",
            "75/75 - 84s - loss: 0.5229 - acc: 0.7407 - val_loss: 0.5075 - val_acc: 0.7550\n",
            "Epoch 20/30\n",
            "75/75 - 84s - loss: 0.5187 - acc: 0.7393 - val_loss: 0.4927 - val_acc: 0.7550\n",
            "Epoch 21/30\n",
            "75/75 - 84s - loss: 0.5106 - acc: 0.7480 - val_loss: 0.4987 - val_acc: 0.7470\n",
            "Epoch 22/30\n",
            "75/75 - 83s - loss: 0.5191 - acc: 0.7407 - val_loss: 0.4974 - val_acc: 0.7700\n",
            "Epoch 23/30\n",
            "75/75 - 83s - loss: 0.5008 - acc: 0.7527 - val_loss: 0.5046 - val_acc: 0.7470\n",
            "Epoch 24/30\n",
            "75/75 - 83s - loss: 0.5154 - acc: 0.7320 - val_loss: 0.5040 - val_acc: 0.7530\n",
            "Epoch 25/30\n",
            "75/75 - 83s - loss: 0.4762 - acc: 0.7760 - val_loss: 0.5245 - val_acc: 0.7480\n",
            "Epoch 26/30\n",
            "75/75 - 83s - loss: 0.5062 - acc: 0.7593 - val_loss: 0.5005 - val_acc: 0.7550\n",
            "Epoch 27/30\n",
            "75/75 - 83s - loss: 0.5047 - acc: 0.7507 - val_loss: 0.4837 - val_acc: 0.7660\n",
            "Epoch 28/30\n",
            "75/75 - 83s - loss: 0.4730 - acc: 0.7833 - val_loss: 0.5078 - val_acc: 0.7490\n",
            "Epoch 29/30\n",
            "75/75 - 83s - loss: 0.5142 - acc: 0.7513 - val_loss: 0.4869 - val_acc: 0.7720\n",
            "Epoch 30/30\n",
            "75/75 - 83s - loss: 0.4868 - acc: 0.7600 - val_loss: 0.4828 - val_acc: 0.7700\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7OXbU1qs3Vkj"
      },
      "source": [
        "model.save('cats_and_dogs_small_4.h5')"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "9g_aJJGd3eiS",
        "outputId": "2a6e3fff-dac8-4145-ec9f-001a7a590c30"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZD9C9GEb3nw7"
      },
      "source": [
        "from keras import layers\n",
        "from keras import models\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Conv2D(32, (3, 3), activation='relu',\n",
        "                        input_shape=(150, 150, 3)))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model.add(layers.MaxPooling2D((2, 2)))\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(512, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DumzXxxZ347f"
      },
      "source": [
        "from keras import optimizers\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=1e-4),\n",
        "              metrics=['acc'])"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "eBUNsvsj4GBj",
        "outputId": "5d78bd95-1acf-4d58-e9d7-f9bb7858ee07"
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# All images will be rescaled by 1./255\n",
        "train_datagen = ImageDataGenerator(rescale=1./255)\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "SCdSm8iN4Jdw",
        "outputId": "7ee3c377-c535-4203-a5ad-2950c3aecb30"
      },
      "source": [
        "for data_batch, labels_batch in train_generator:\n",
        "    print('data batch shape:', data_batch.shape)\n",
        "    print('labels batch shape:', labels_batch.shape)\n",
        "    break"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "data batch shape: (20, 150, 150, 3)\n",
            "labels batch shape: (20,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "gX-96a7B4fAa",
        "outputId": "64b65c46-6e1f-4ac6-d6ee-ebdad420b9e0"
      },
      "source": [
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=100,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "100/100 [==============================] - 100s 992ms/step - loss: 0.6968 - acc: 0.5114 - val_loss: 0.6736 - val_acc: 0.5710\n",
            "Epoch 2/30\n",
            "100/100 [==============================] - 99s 994ms/step - loss: 0.6687 - acc: 0.6151 - val_loss: 0.6593 - val_acc: 0.6010\n",
            "Epoch 3/30\n",
            "100/100 [==============================] - 100s 997ms/step - loss: 0.6230 - acc: 0.6575 - val_loss: 0.6180 - val_acc: 0.6670\n",
            "Epoch 4/30\n",
            "100/100 [==============================] - 100s 998ms/step - loss: 0.5829 - acc: 0.7049 - val_loss: 0.6117 - val_acc: 0.6610\n",
            "Epoch 5/30\n",
            "100/100 [==============================] - 100s 1s/step - loss: 0.5388 - acc: 0.7293 - val_loss: 0.6251 - val_acc: 0.6620\n",
            "Epoch 6/30\n",
            "100/100 [==============================] - 100s 1s/step - loss: 0.5179 - acc: 0.7433 - val_loss: 0.6235 - val_acc: 0.6660\n",
            "Epoch 7/30\n",
            "100/100 [==============================] - 100s 1s/step - loss: 0.4838 - acc: 0.7792 - val_loss: 0.6076 - val_acc: 0.6690\n",
            "Epoch 8/30\n",
            "100/100 [==============================] - 100s 999ms/step - loss: 0.4497 - acc: 0.7916 - val_loss: 0.5622 - val_acc: 0.7120\n",
            "Epoch 9/30\n",
            "100/100 [==============================] - 100s 999ms/step - loss: 0.4293 - acc: 0.7958 - val_loss: 0.5659 - val_acc: 0.7100\n",
            "Epoch 10/30\n",
            "100/100 [==============================] - 100s 998ms/step - loss: 0.3960 - acc: 0.8378 - val_loss: 0.5773 - val_acc: 0.6980\n",
            "Epoch 11/30\n",
            "100/100 [==============================] - 100s 997ms/step - loss: 0.3805 - acc: 0.8239 - val_loss: 0.6066 - val_acc: 0.7000\n",
            "Epoch 12/30\n",
            "100/100 [==============================] - 100s 996ms/step - loss: 0.3462 - acc: 0.8456 - val_loss: 0.5639 - val_acc: 0.7260\n",
            "Epoch 13/30\n",
            "100/100 [==============================] - 99s 994ms/step - loss: 0.3186 - acc: 0.8705 - val_loss: 0.5786 - val_acc: 0.7210\n",
            "Epoch 14/30\n",
            "100/100 [==============================] - 99s 993ms/step - loss: 0.2872 - acc: 0.8781 - val_loss: 0.6139 - val_acc: 0.7210\n",
            "Epoch 15/30\n",
            "100/100 [==============================] - 100s 999ms/step - loss: 0.2718 - acc: 0.8965 - val_loss: 0.6034 - val_acc: 0.7280\n",
            "Epoch 16/30\n",
            "100/100 [==============================] - 99s 994ms/step - loss: 0.2594 - acc: 0.8915 - val_loss: 0.6998 - val_acc: 0.7180\n",
            "Epoch 17/30\n",
            "100/100 [==============================] - 99s 994ms/step - loss: 0.2265 - acc: 0.9134 - val_loss: 0.7229 - val_acc: 0.7190\n",
            "Epoch 18/30\n",
            "100/100 [==============================] - 100s 999ms/step - loss: 0.2011 - acc: 0.9297 - val_loss: 0.7045 - val_acc: 0.7020\n",
            "Epoch 19/30\n",
            "100/100 [==============================] - 100s 1s/step - loss: 0.1739 - acc: 0.9369 - val_loss: 0.6925 - val_acc: 0.7120\n",
            "Epoch 20/30\n",
            "100/100 [==============================] - 100s 999ms/step - loss: 0.1458 - acc: 0.9508 - val_loss: 0.8168 - val_acc: 0.7230\n",
            "Epoch 21/30\n",
            "100/100 [==============================] - 102s 1s/step - loss: 0.1430 - acc: 0.9559 - val_loss: 0.8532 - val_acc: 0.7070\n",
            "Epoch 22/30\n",
            "100/100 [==============================] - 100s 1s/step - loss: 0.1106 - acc: 0.9629 - val_loss: 0.8392 - val_acc: 0.7240\n",
            "Epoch 23/30\n",
            "100/100 [==============================] - 100s 1s/step - loss: 0.0992 - acc: 0.9677 - val_loss: 0.8111 - val_acc: 0.7240\n",
            "Epoch 24/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.0896 - acc: 0.9716 - val_loss: 0.8794 - val_acc: 0.7250\n",
            "Epoch 25/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.1070 - acc: 0.9717 - val_loss: 0.9596 - val_acc: 0.7130\n",
            "Epoch 26/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.0739 - acc: 0.9774 - val_loss: 1.0243 - val_acc: 0.7150\n",
            "Epoch 27/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.0521 - acc: 0.9860 - val_loss: 1.1731 - val_acc: 0.7030\n",
            "Epoch 28/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.0398 - acc: 0.9917 - val_loss: 1.1352 - val_acc: 0.7250\n",
            "Epoch 29/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.0461 - acc: 0.9863 - val_loss: 1.1168 - val_acc: 0.7180\n",
            "Epoch 30/30\n",
            "100/100 [==============================] - 101s 1s/step - loss: 0.0326 - acc: 0.9919 - val_loss: 1.2036 - val_acc: 0.7130\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dD9dNebaFkGC"
      },
      "source": [
        "model.save('cats_and_dogs_small_5.h5')"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "qQhtUtftFtUO",
        "outputId": "2b8a95dc-e630-4aa2-e409-575f634fad6c"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7ay3ccg8SqHW"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "gxPjzoeVF2Fv",
        "outputId": "4247bde9-8b9a-4a69-cbab-6cf308dbbfde"
      },
      "source": [
        "# Data Augmentation\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=100,\n",
        "      epochs=30,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      verbose=2)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n",
            "100/100 - 111s - loss: 0.9760 - acc: 0.6720 - val_loss: 0.8394 - val_acc: 0.6960\n",
            "Epoch 2/30\n",
            "100/100 - 108s - loss: 0.7553 - acc: 0.6600 - val_loss: 0.6731 - val_acc: 0.7090\n",
            "Epoch 3/30\n",
            "100/100 - 107s - loss: 0.6592 - acc: 0.6790 - val_loss: 0.6028 - val_acc: 0.6980\n",
            "Epoch 4/30\n",
            "100/100 - 107s - loss: 0.6027 - acc: 0.6980 - val_loss: 0.5706 - val_acc: 0.7190\n",
            "Epoch 5/30\n",
            "100/100 - 108s - loss: 0.5843 - acc: 0.7105 - val_loss: 0.5650 - val_acc: 0.7150\n",
            "Epoch 6/30\n",
            "100/100 - 107s - loss: 0.5748 - acc: 0.6955 - val_loss: 0.5501 - val_acc: 0.7250\n",
            "Epoch 7/30\n",
            "100/100 - 107s - loss: 0.5784 - acc: 0.6995 - val_loss: 0.5508 - val_acc: 0.7320\n",
            "Epoch 8/30\n",
            "100/100 - 107s - loss: 0.5724 - acc: 0.6960 - val_loss: 0.5302 - val_acc: 0.7340\n",
            "Epoch 9/30\n",
            "100/100 - 109s - loss: 0.5621 - acc: 0.7175 - val_loss: 0.5302 - val_acc: 0.7290\n",
            "Epoch 10/30\n",
            "100/100 - 107s - loss: 0.5479 - acc: 0.7175 - val_loss: 0.5441 - val_acc: 0.7280\n",
            "Epoch 11/30\n",
            "100/100 - 107s - loss: 0.5389 - acc: 0.7310 - val_loss: 0.5301 - val_acc: 0.7370\n",
            "Epoch 12/30\n",
            "100/100 - 107s - loss: 0.5396 - acc: 0.7280 - val_loss: 0.5291 - val_acc: 0.7430\n",
            "Epoch 13/30\n",
            "100/100 - 107s - loss: 0.5346 - acc: 0.7280 - val_loss: 0.5380 - val_acc: 0.7340\n",
            "Epoch 14/30\n",
            "100/100 - 108s - loss: 0.5402 - acc: 0.7330 - val_loss: 0.5533 - val_acc: 0.7230\n",
            "Epoch 15/30\n",
            "100/100 - 107s - loss: 0.5460 - acc: 0.7090 - val_loss: 0.5195 - val_acc: 0.7400\n",
            "Epoch 16/30\n",
            "100/100 - 107s - loss: 0.5408 - acc: 0.7310 - val_loss: 0.5120 - val_acc: 0.7320\n",
            "Epoch 17/30\n",
            "100/100 - 109s - loss: 0.5378 - acc: 0.7305 - val_loss: 0.5104 - val_acc: 0.7460\n",
            "Epoch 18/30\n",
            "100/100 - 109s - loss: 0.5369 - acc: 0.7220 - val_loss: 0.5096 - val_acc: 0.7480\n",
            "Epoch 19/30\n",
            "100/100 - 108s - loss: 0.5387 - acc: 0.7090 - val_loss: 0.5056 - val_acc: 0.7530\n",
            "Epoch 20/30\n",
            "100/100 - 109s - loss: 0.5190 - acc: 0.7435 - val_loss: 0.5007 - val_acc: 0.7540\n",
            "Epoch 21/30\n",
            "100/100 - 108s - loss: 0.5193 - acc: 0.7415 - val_loss: 0.5013 - val_acc: 0.7400\n",
            "Epoch 22/30\n",
            "100/100 - 108s - loss: 0.5001 - acc: 0.7570 - val_loss: 0.5059 - val_acc: 0.7460\n",
            "Epoch 23/30\n",
            "100/100 - 108s - loss: 0.5143 - acc: 0.7505 - val_loss: 0.5070 - val_acc: 0.7510\n",
            "Epoch 24/30\n",
            "100/100 - 108s - loss: 0.5321 - acc: 0.7290 - val_loss: 0.4954 - val_acc: 0.7530\n",
            "Epoch 25/30\n",
            "100/100 - 108s - loss: 0.5071 - acc: 0.7510 - val_loss: 0.5039 - val_acc: 0.7630\n",
            "Epoch 26/30\n",
            "100/100 - 109s - loss: 0.5270 - acc: 0.7250 - val_loss: 0.4975 - val_acc: 0.7480\n",
            "Epoch 27/30\n",
            "100/100 - 109s - loss: 0.5229 - acc: 0.7415 - val_loss: 0.5124 - val_acc: 0.7430\n",
            "Epoch 28/30\n",
            "100/100 - 108s - loss: 0.5018 - acc: 0.7595 - val_loss: 0.5000 - val_acc: 0.7560\n",
            "Epoch 29/30\n",
            "100/100 - 108s - loss: 0.4899 - acc: 0.7530 - val_loss: 0.5088 - val_acc: 0.7560\n",
            "Epoch 30/30\n",
            "100/100 - 107s - loss: 0.5109 - acc: 0.7465 - val_loss: 0.4900 - val_acc: 0.7640\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HV86UZ4FSt5Y"
      },
      "source": [
        "model.save('cats_and_dogs_small_5.h5')"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "Dbz05LnzS3eS",
        "outputId": "b782fad2-8919-43a9-8f06-916ec48487a5"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "TKF9rBnG54Q1",
        "outputId": "1ba8cf22-a2b5-4f2c-da7c-8389164f375a"
      },
      "source": [
        "from keras.applications import VGG16\n",
        "\n",
        "conv_base = VGG16(weights='imagenet',\n",
        "                  include_top=False,\n",
        "                  input_shape=(150, 150, 3))"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "58892288/58889256 [==============================] - 1s 0us/step\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "7vYpO7mu781L",
        "outputId": "6057654f-44c9-48a1-c369-91918558af47"
      },
      "source": [
        "conv_base.summary()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"vgg16\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_1 (InputLayer)         [(None, 150, 150, 3)]     0         \n",
            "_________________________________________________________________\n",
            "block1_conv1 (Conv2D)        (None, 150, 150, 64)      1792      \n",
            "_________________________________________________________________\n",
            "block1_conv2 (Conv2D)        (None, 150, 150, 64)      36928     \n",
            "_________________________________________________________________\n",
            "block1_pool (MaxPooling2D)   (None, 75, 75, 64)        0         \n",
            "_________________________________________________________________\n",
            "block2_conv1 (Conv2D)        (None, 75, 75, 128)       73856     \n",
            "_________________________________________________________________\n",
            "block2_conv2 (Conv2D)        (None, 75, 75, 128)       147584    \n",
            "_________________________________________________________________\n",
            "block2_pool (MaxPooling2D)   (None, 37, 37, 128)       0         \n",
            "_________________________________________________________________\n",
            "block3_conv1 (Conv2D)        (None, 37, 37, 256)       295168    \n",
            "_________________________________________________________________\n",
            "block3_conv2 (Conv2D)        (None, 37, 37, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_conv3 (Conv2D)        (None, 37, 37, 256)       590080    \n",
            "_________________________________________________________________\n",
            "block3_pool (MaxPooling2D)   (None, 18, 18, 256)       0         \n",
            "_________________________________________________________________\n",
            "block4_conv1 (Conv2D)        (None, 18, 18, 512)       1180160   \n",
            "_________________________________________________________________\n",
            "block4_conv2 (Conv2D)        (None, 18, 18, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_conv3 (Conv2D)        (None, 18, 18, 512)       2359808   \n",
            "_________________________________________________________________\n",
            "block4_pool (MaxPooling2D)   (None, 9, 9, 512)         0         \n",
            "_________________________________________________________________\n",
            "block5_conv1 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv2 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "block5_conv3 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
            "_________________________________________________________________\n",
            "block5_pool (MaxPooling2D)   (None, 4, 4, 512)         0         \n",
            "=================================================================\n",
            "Total params: 14,714,688\n",
            "Trainable params: 14,714,688\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fwbemUlM8JcE"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(conv_base)\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(256, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "t17tOsNT8fQs",
        "outputId": "8236c973-4df1-464a-c786-df71ce58ce65"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 256)               2097408   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 257       \n",
            "=================================================================\n",
            "Total params: 16,812,353\n",
            "Trainable params: 16,812,353\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "QCj3gOFt8oYl",
        "outputId": "a7ac2be5-61e8-47ad-dcbb-77e4d3bf8530"
      },
      "source": [
        "print('This is the number of trainable weights '\n",
        "      'before freezing the conv base:', len(model.trainable_weights))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "This is the number of trainable weights before freezing the conv base: 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pNWPl9kY8ykZ"
      },
      "source": [
        "conv_base.trainable = False"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "289wIu9l-l_Y",
        "outputId": "58ac8820-129f-4175-fa65-093fad5994c4"
      },
      "source": [
        "print('This is the number of trainable weights '\n",
        "      'after freezing the conv base:', len(model.trainable_weights))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "This is the number of trainable weights after freezing the conv base: 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "J6_svBdd-pFK",
        "outputId": "9cf05148-2347-48be-e000-dc0e61427089"
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras import models\n",
        "from keras import layers\n",
        "from keras import optimizers\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=50,\n",
        "      epochs=6,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      verbose=2)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "50/50 - 434s - loss: 0.3503 - acc: 0.8460 - val_loss: 0.2703 - val_acc: 0.8920\n",
            "Epoch 2/6\n",
            "50/50 - 433s - loss: 0.3392 - acc: 0.8590 - val_loss: 0.2733 - val_acc: 0.8910\n",
            "Epoch 3/6\n",
            "50/50 - 433s - loss: 0.3473 - acc: 0.8480 - val_loss: 0.2726 - val_acc: 0.8880\n",
            "Epoch 4/6\n",
            "50/50 - 433s - loss: 0.3528 - acc: 0.8490 - val_loss: 0.2673 - val_acc: 0.8890\n",
            "Epoch 5/6\n",
            "50/50 - 433s - loss: 0.3490 - acc: 0.8360 - val_loss: 0.2622 - val_acc: 0.8940\n",
            "Epoch 6/6\n",
            "50/50 - 433s - loss: 0.3113 - acc: 0.8690 - val_loss: 0.2624 - val_acc: 0.8960\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wE_K9199qXKm"
      },
      "source": [
        "model.save('cats_and_dogs_small_7.h5')"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "VthtWTSMqlwu",
        "outputId": "e97f88c4-4b81-44b1-9b2b-cd3425708b10"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A5E4QAtNqwXA"
      },
      "source": [
        "conv_base.trainable = True\n",
        "\n",
        "set_trainable = False\n",
        "for layer in conv_base.layers:\n",
        "    if layer.name == 'block5_conv1':\n",
        "        set_trainable = True\n",
        "    if set_trainable:\n",
        "        layer.trainable = True\n",
        "    else:\n",
        "        layer.trainable = False"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "XmwaWzTft3Ay",
        "outputId": "60d76f2e-fa5c-4b12-f7fe-2248d8f2baa9"
      },
      "source": [
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=1e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=50,\n",
        "      epochs=6,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "50/50 [==============================] - 481s 10s/step - loss: 0.3742 - acc: 0.8324 - val_loss: 0.2474 - val_acc: 0.8980\n",
            "Epoch 2/6\n",
            "50/50 [==============================] - 478s 10s/step - loss: 0.2838 - acc: 0.8849 - val_loss: 0.2116 - val_acc: 0.9090\n",
            "Epoch 3/6\n",
            "50/50 [==============================] - 477s 10s/step - loss: 0.2770 - acc: 0.8686 - val_loss: 0.2080 - val_acc: 0.9140\n",
            "Epoch 4/6\n",
            "50/50 [==============================] - 477s 10s/step - loss: 0.2708 - acc: 0.8856 - val_loss: 0.2124 - val_acc: 0.9140\n",
            "Epoch 5/6\n",
            "50/50 [==============================] - 477s 10s/step - loss: 0.2572 - acc: 0.8686 - val_loss: 0.2117 - val_acc: 0.9140\n",
            "Epoch 6/6\n",
            "50/50 [==============================] - 482s 10s/step - loss: 0.2990 - acc: 0.8944 - val_loss: 0.2092 - val_acc: 0.9100\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tMBO4Cdq6QuS"
      },
      "source": [
        "model.save('cats_and_dogs_small_8.h5')"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "yIzTkzvW6ZQ8",
        "outputId": "c7977d9a-1381-4578-d6cd-1f628b42db6c"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "6JKMaElf6lBL",
        "outputId": "f55906da-97fa-4c32-95c4-da52e6d9b19e"
      },
      "source": [
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=75,\n",
        "      epochs=6,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      verbose=2)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "75/75 - 621s - loss: 0.2795 - acc: 0.8773 - val_loss: 0.2099 - val_acc: 0.9160\n",
            "Epoch 2/6\n",
            "75/75 - 628s - loss: 0.2492 - acc: 0.8987 - val_loss: 0.1996 - val_acc: 0.9250\n",
            "Epoch 3/6\n",
            "75/75 - 620s - loss: 0.2291 - acc: 0.9107 - val_loss: 0.3017 - val_acc: 0.8970\n",
            "Epoch 4/6\n",
            "75/75 - 621s - loss: 0.2080 - acc: 0.9120 - val_loss: 0.1936 - val_acc: 0.9220\n",
            "Epoch 5/6\n",
            "75/75 - 623s - loss: 0.2073 - acc: 0.9153 - val_loss: 0.5256 - val_acc: 0.8330\n",
            "Epoch 6/6\n",
            "75/75 - 620s - loss: 0.1963 - acc: 0.9173 - val_loss: 0.1757 - val_acc: 0.9270\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3kZO9uRRJE-p"
      },
      "source": [
        "model.save('cats_and_dogs_small_9.h5')"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "FMT1M8vBJMXa",
        "outputId": "8c316824-1596-4914-e7b8-3535156e6552"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hGNZcKQTJZnh"
      },
      "source": [
        "conv_base.trainable = True\n",
        "\n",
        "set_trainable = False\n",
        "for layer in conv_base.layers:\n",
        "    if layer.name == 'block5_conv1':\n",
        "        set_trainable = True\n",
        "    if set_trainable:\n",
        "        layer.trainable = True\n",
        "    else:\n",
        "        layer.trainable = False"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "utfBWk0YJ7QZ",
        "outputId": "3f542256-175b-4ebd-d282-a600c9d8a319"
      },
      "source": [
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=1e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=75,\n",
        "      epochs=6,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "75/75 [==============================] - 618s 8s/step - loss: 0.1855 - acc: 0.9283 - val_loss: 0.1688 - val_acc: 0.9350\n",
            "Epoch 2/6\n",
            "75/75 [==============================] - 617s 8s/step - loss: 0.1608 - acc: 0.9387 - val_loss: 0.1574 - val_acc: 0.9390\n",
            "Epoch 3/6\n",
            "75/75 [==============================] - 617s 8s/step - loss: 0.1449 - acc: 0.9450 - val_loss: 0.1640 - val_acc: 0.9370\n",
            "Epoch 4/6\n",
            "75/75 [==============================] - 617s 8s/step - loss: 0.1353 - acc: 0.9407 - val_loss: 0.1599 - val_acc: 0.9410\n",
            "Epoch 5/6\n",
            "75/75 [==============================] - 617s 8s/step - loss: 0.1123 - acc: 0.9590 - val_loss: 0.1915 - val_acc: 0.9290\n",
            "Epoch 6/6\n",
            "75/75 [==============================] - 617s 8s/step - loss: 0.1520 - acc: 0.9298 - val_loss: 0.1636 - val_acc: 0.9340\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mujd2DDeYe2G"
      },
      "source": [
        "model.save('cats_and_dogs_small_10.h5')"
      ],
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "yRu4wxE-Yo4H",
        "outputId": "768e8c01-a570-4dd6-f06f-3d804228da33"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9tWg4WoLZW7w"
      },
      "source": [
        "from keras import models\n",
        "from keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(conv_base)\n",
        "model.add(layers.Flatten())\n",
        "model.add(layers.Dense(256, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "zvIqV1xRbPzh",
        "outputId": "00e71694-2e89-4346-8e08-08b771b627b5"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "vgg16 (Functional)           (None, 4, 4, 512)         14714688  \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 8192)              0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 256)               2097408   \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 1)                 257       \n",
            "=================================================================\n",
            "Total params: 16,812,353\n",
            "Trainable params: 9,177,089\n",
            "Non-trainable params: 7,635,264\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "V3-gVYn1bWpx",
        "outputId": "3e922417-b412-4d85-95b2-9ca37ef90faf"
      },
      "source": [
        "print('This is the number of trainable weights '\n",
        "      'before freezing the conv base:', len(model.trainable_weights))"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "This is the number of trainable weights before freezing the conv base: 10\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ybbtIKULbc0h"
      },
      "source": [
        "conv_base.trainable = False"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "uljgmvzzbhhM",
        "outputId": "4a1f0254-7562-4d02-df21-ea6237a54b4f"
      },
      "source": [
        "print('This is the number of trainable weights '\n",
        "      'after freezing the conv base:', len(model.trainable_weights))"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "This is the number of trainable weights after freezing the conv base: 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "PzApe2jrbqME",
        "outputId": "c19621c7-4bf1-42bc-8988-eed5f866aebf"
      },
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255,\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory\n",
        "        train_dir,\n",
        "        # All images will be resized to 150x150\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        # Since we use binary_crossentropy loss, we need binary labels\n",
        "        class_mode='binary')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory(\n",
        "        validation_dir,\n",
        "        target_size=(150, 150),\n",
        "        batch_size=20,\n",
        "        class_mode='binary')\n",
        "\n",
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=100,\n",
        "      epochs=6,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50,\n",
        "      verbose=2)"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 2000 images belonging to 2 classes.\n",
            "Found 1000 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "100/100 - 659s - loss: 0.3833 - acc: 0.8510 - val_loss: 0.2088 - val_acc: 0.9170\n",
            "Epoch 2/6\n",
            "100/100 - 658s - loss: 0.2121 - acc: 0.9290 - val_loss: 0.1670 - val_acc: 0.9340\n",
            "Epoch 3/6\n",
            "100/100 - 658s - loss: 0.1649 - acc: 0.9475 - val_loss: 0.1560 - val_acc: 0.9370\n",
            "Epoch 4/6\n",
            "100/100 - 660s - loss: 0.1449 - acc: 0.9535 - val_loss: 0.1508 - val_acc: 0.9370\n",
            "Epoch 5/6\n",
            "100/100 - 656s - loss: 0.1396 - acc: 0.9510 - val_loss: 0.1561 - val_acc: 0.9350\n",
            "Epoch 6/6\n",
            "100/100 - 655s - loss: 0.1398 - acc: 0.9425 - val_loss: 0.1527 - val_acc: 0.9360\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ngnjwb18tcdH"
      },
      "source": [
        "model.save('cats_and_dogs_small_11.h5')"
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "nH5i7nRBt3UO",
        "outputId": "b568ca53-3937-4fb8-cc4f-54f74720aa76"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HfLPyk5QuwkD"
      },
      "source": [
        "conv_base.trainable = True\n",
        "\n",
        "set_trainable = False\n",
        "for layer in conv_base.layers:\n",
        "    if layer.name == 'block5_conv1':\n",
        "        set_trainable = True\n",
        "    if set_trainable:\n",
        "        layer.trainable = True\n",
        "    else:\n",
        "        layer.trainable = False"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "5pBdVlreu8eW",
        "outputId": "52bca1cc-ec0e-4fd3-e07d-68ce70a1a149"
      },
      "source": [
        "model.compile(loss='binary_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=1e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=100,\n",
        "      epochs=6,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=50)"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/6\n",
            "100/100 [==============================] - 748s 7s/step - loss: 0.1362 - acc: 0.9445 - val_loss: 0.1999 - val_acc: 0.9250\n",
            "Epoch 2/6\n",
            "100/100 [==============================] - 745s 7s/step - loss: 0.1357 - acc: 0.9457 - val_loss: 0.2141 - val_acc: 0.9220\n",
            "Epoch 3/6\n",
            "100/100 [==============================] - 745s 7s/step - loss: 0.1179 - acc: 0.9512 - val_loss: 0.1564 - val_acc: 0.9440\n",
            "Epoch 4/6\n",
            "100/100 [==============================] - 746s 7s/step - loss: 0.1261 - acc: 0.9514 - val_loss: 0.1758 - val_acc: 0.9350\n",
            "Epoch 5/6\n",
            "100/100 [==============================] - 746s 7s/step - loss: 0.1226 - acc: 0.9508 - val_loss: 0.1608 - val_acc: 0.9350\n",
            "Epoch 6/6\n",
            "100/100 [==============================] - 747s 7s/step - loss: 0.1081 - acc: 0.9598 - val_loss: 0.1940 - val_acc: 0.9300\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L10rfC0nAOBf"
      },
      "source": [
        "model.save('cats_and_dogs_small_12.h5')"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        },
        "id": "KdAkq7cNAezj",
        "outputId": "dc7e6732-e727-49c7-a1bc-e6d749672bf9"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gRr_OUz6yf3S"
      },
      "source": [
        "At 1,000 dataset:\n",
        "validation accuracy was 72%, when we increased the dataset to 1,500, there was no change to validation accuracy. \n",
        "When we applied data augmentation and regularization, validation accuracy went up to 75% (4% increase)\n",
        "When we used a pretrained network, validation accuracy was 90% (25% increase)\n",
        "When we applied data augmentation and regularization to the pretrained network, validation accuracy went up further to 92% (28% increase) \n",
        "\n",
        "Validation loss was also affected, we started with a validation loss of 0.55 @24epochs, when we increased our dataset to 1,500, there was no change in validation loss, when we applied data augmentation and regularization, validation loss reduced to 0.49 @24epochs, when we used a pretrained network, validation loss further reduced to 0.26 @5epochs and when we applied data augmentation and regularization to the pre-trained network, validation loss dropped further to 0.1 @2epochs.\n",
        "\n",
        "At 1,500 dataset:\n",
        "validation accuracy was 72%, when we increased the dataset to 2,000, there was no change to validation accuracy. \n",
        "When we applied data augmentation and regularization, validation accuracy went up to 77% (7% increase)\n",
        "When we used a pretrained network, validation accuracy was 93% (29% increase)\n",
        "When we applied data augmentation and regularization to the pretrained network, validation accuracy went up further to 94% (31% increase)\n",
        "\n",
        "Validation loss was also affected, we started with a validation loss of 0.55 @14epochs, when we increased our dataset to 2,000, there was no change in validation loss, when we applied data augmentation and regularization, validation loss reduced to 0.4 @24epochs, when we used a pretrained network, validation loss further reduced to 0.15 @6epochs and when we applied data augmentation and regularization to the pre-trained network, validation loss dropped further to 0.1 @5epochs.\n",
        "\n",
        "At 2,000 dataset:\n",
        "validation accuracy was 72%\n",
        "When we applied data augmentation and regularization, validation accuracy went up to 77% (7% increase)\n",
        "When we used a pretrained network, validation accuracy was 93% (29% increase)\n",
        "When we applied data augmentation and regularization to the pretrained network, validation accuracy went up further to 94.5% (31.25% increase)\n",
        "\n",
        "Validation loss was also affected, we started with a validation loss of 0.55 @7epochs, when we applied data augmentation and regularization, validation loss reduced to 0.4 @23epochs, when we used a pretrained network, validation loss further reduced to 0.15 @3epochs and when we applied data augmentation and regularization to the pre-trained network, validation loss dropped further to 0.1 @3epochs\n",
        "\n",
        "Based on the above, data augmentation and regularization is more effective than increase in dataset for training a network, however, pretrained networks are most effective for classification models. \n",
        "\n",
        "\n"
      ]
    }
  ]
}